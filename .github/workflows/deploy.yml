name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: api-vwn-repository
  TF_VERSION: 1.2.0

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan -var="db_password=${{ secrets.DB_PASSWORD }}"

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"

      - name: Get ECR Repository URL
        working-directory: ./infra
        id: get-ecr-url
        run: |
          ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)
          echo "ECR_REPOSITORY_URL=$ECR_REPOSITORY_URL" >> $GITHUB_OUTPUT

      - name: Get ALB DNS Name
        working-directory: ./infra
        id: get-alb-dns
        run: |
          ALB_DNS_NAME=$(terraform output -raw alb_dns_name)
          echo "ALB_DNS_NAME=$ALB_DNS_NAME" >> $GITHUB_OUTPUT

  build-and-deploy-app:
    name: Build and Deploy Application
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR Repository URL
        working-directory: ./infra
        id: get-ecr-url
        run: |
          terraform init -backend=false
          ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)
          echo "ECR_REPOSITORY_URL=$ECR_REPOSITORY_URL" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        working-directory: ./app
        env:
          ECR_REPOSITORY_URL: ${{ steps.get-ecr-url.outputs.ECR_REPOSITORY_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --platform linux/amd64 -t $ECR_REPOSITORY_URL:$IMAGE_TAG -t $ECR_REPOSITORY_URL:latest .
          docker push $ECR_REPOSITORY_URL:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URL:latest
          echo "::set-output name=image::$ECR_REPOSITORY_URL:$IMAGE_TAG"

      - name: Force new deployment of ECS service
        run: |
          aws ecs update-service --cluster api-vwn-cluster --service api-vwn-service --force-new-deployment

      - name: Wait for service to be stable
        run: |
          aws ecs wait services-stable --cluster api-vwn-cluster --services api-vwn-service

  verify-deployment:
    name: Verify Deployment
    needs: build-and-deploy-app
    runs-on: ubuntu-latest
    steps:
      - name: Get ALB DNS Name
        working-directory: ./infra
        id: get-alb-dns
        run: |
          terraform init -backend=false
          ALB_DNS_NAME=$(terraform output -raw alb_dns_name)
          echo "ALB_DNS_NAME=$ALB_DNS_NAME" >> $GITHUB_OUTPUT

      - name: Check health endpoint
        run: |
          # Wait for ALB to be available
          sleep 60
          # Check health endpoint
          curl -s --retry 10 --retry-delay 10 http://${{ steps.get-alb-dns.outputs.ALB_DNS_NAME }}/health
      
      - name: Check FizzBuzz endpoint
        run: |
          # Check FizzBuzz endpoint
          curl -s http://${{ steps.get-alb-dns.outputs.ALB_DNS_NAME }}/fizzbuzz/15 